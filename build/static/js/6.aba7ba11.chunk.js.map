{"version":3,"sources":["components/MyTextInput/MyTextInput.js","components/MyTextInput/MyTextInput.module.css","views/Registration/Registration.module.css","views/Registration/Registration.js"],"names":["MyTextInput","label","props","useField","field","meta","className","s","htmlFor","id","name","input","touched","error","module","exports","validationSchema","Yup","required","email","password","min","max","confirmPassword","oneOf","Registration","dispatch","useDispatch","handleSubmit","useCallback","values","a","setSubmitting","resetForm","authOperations","register","message","toast","console","log","initialValues","onSubmit","formik","form","type","placeholder","btn","disabled","dirty","isValid"],"mappings":"oQAKOA,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,iBAE3C,EAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KACA,OACE,qCACE,uBAAOC,UAAYC,IAAEN,MAAOO,QAASN,EAAMO,IAAMP,EAAMQ,KAAvD,SAA8DT,IAC9D,+CAAOK,UAAWC,IAAEI,OAAWP,GAAWF,IACzCG,EAAKO,SAAWP,EAAKQ,MACpB,qBAAKP,UAAWC,IAAEM,MAAlB,SAA0BR,EAAKQ,QAC7B,U,oBCbXC,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,MAAQ,2BAA2B,MAAQ,6B,oBCAhGD,EAAOC,QAAU,CAAC,KAAO,2BAA2B,IAAM,4B,uMCUpDC,EAAmBC,IAAW,CAChCP,KAAMO,MAAaC,SAAS,YAC9BC,MAAOF,MAAaE,MAAM,yBAAyBD,SAAS,YAC5DE,SAAUH,MACPI,IAAI,EAAG,iBACPC,IAAI,GAAI,kBACJJ,SAAS,YACdK,gBAAiBN,MAChBO,MAAM,CAACP,IAAQ,YAAa,MAAO,wBAAwBC,SAAS,cAoE1DO,EAhEM,WACnB,IAAMC,EAAWC,cAUXC,EAAeC,sBAAW,uCAAE,WAAOC,EAAP,0BAAAC,EAAA,6DAAiBC,EAAjB,EAAiBA,cAAeC,EAAhC,EAAgCA,UACxDvB,EAA0BoB,EAA1BpB,KAAMS,EAAoBW,EAApBX,MAAOC,EAAaU,EAAbV,SADW,kBAGxBM,EAASQ,IAAeC,SAAS,CAACzB,OAAMS,QAAOC,cAHvB,uDAKE,MAAlB,KAAMgB,SACRC,IAAMxB,MAAM,+BANM,QAUhCyB,QAAQC,IAAIT,GACZE,GAAc,GACdC,EAAU,CAACH,OAAQ,KAZa,yDAAF,wDAa7B,CAACJ,IAEF,OACA,cAAC,IAAD,CACEc,cAxBmB,CACrB9B,KAAM,GACNS,MAAO,GACPC,SAAU,GACVG,gBAAiB,IAqBfP,iBAAkBA,EAClByB,SAAUb,EAHZ,SAKK,SAACc,GAAD,OACC,eAAC,IAAD,CAAMpC,UAAWC,IAAEoC,KAAnB,UACA,cAAC3C,EAAA,EAAD,CACAC,MAAM,YACNS,KAAK,OACLkC,KAAK,OACLC,YAAY,SAEd,cAAC7C,EAAA,EAAD,CACKC,MAAM,aACNS,KAAK,QACLkC,KAAK,QACLC,YAAY,oBAEjB,cAAC7C,EAAA,EAAD,CACEC,MAAM,gBACNS,KAAK,WACLkC,KAAK,aAGC,cAAC5C,EAAA,EAAD,CACNC,MAAM,wBACNS,KAAK,kBACLkC,KAAK,aAEH,wBAAQtC,UAAYC,IAAEuC,IAAKF,KAAK,SAASG,WAAYL,EAAOM,OAASN,EAAOO,SAA5E","file":"static/js/6.aba7ba11.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useField } from 'formik';\r\nimport s from './MyTextInput.module.css';\r\n\r\n \r\n const MyTextInput = ({ label, ...props }) => {\r\n\r\n   const [field, meta] = useField(props);\r\n   return (\r\n     <>\r\n       <label className={ s.label} htmlFor={props.id || props.name}>{label}</label>\r\n       <input className={s.input} {...field} {...props} />\r\n       {meta.touched && meta.error ? (\r\n         <div className={s.error}>{meta.error}</div>\r\n       ) : null}\r\n     </>\r\n   );\r\n };\r\n\r\nexport { MyTextInput }; ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"MyTextInput_label__3Ter4\",\"input\":\"MyTextInput_input__3CHKz\",\"error\":\"MyTextInput_error__2h0UX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Registration_form__3Uihy\",\"btn\":\"Registration_btn__286F9\"};","import { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport s from './Registration.module.css';\r\nimport { MyTextInput } from 'components/MyTextInput/MyTextInput';\r\nimport authOperations from 'redux/auth/auth-operations';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useCallback } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n    name: Yup.string().required('Required'),\r\n  email: Yup.string().email('Invalid email address').required('Required'),\r\n  password: Yup.string()\r\n    .min(6, 'Min 8 symbols')\r\n    .max(20, 'Max 15 symbols')\r\n        .required('Required'),\r\n    confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required')\r\n  \r\n});\r\n\r\nconst Registration = () => {\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const INITIAL_VALUES = {\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n  }\r\n\r\n  const handleSubmit = useCallback( async (values, { setSubmitting, resetForm }) => {\r\n    const { name, email, password } = values;\r\n    try {\r\n      await dispatch(authOperations.register({name, email, password}));\r\n    } catch (error){\r\n                if (error.message === 400) {\r\n                  toast.error('Incorrect password or login');\r\n      }\r\n    }\r\n    \r\n    console.log(values)\r\n    setSubmitting(false);\r\n    resetForm({values: ''})\r\n  }, [dispatch])\r\n\r\n    return (\r\n    <Formik\r\n      initialValues={INITIAL_VALUES}\r\n      validationSchema={validationSchema}\r\n      onSubmit={handleSubmit}\r\n      >\r\n        {(formik) => (\r\n          <Form className={s.form}>\r\n          <MyTextInput\r\n          label=\"Your name\"\r\n          name=\"name\"\r\n          type=\"text\"\r\n          placeholder=\"Sara\"/>\r\n        \r\n        <MyTextInput\r\n             label=\"Your email\"\r\n             name=\"email\"\r\n             type=\"email\"\r\n             placeholder=\"jane@formik.com\"/>\r\n         \r\n        <MyTextInput\r\n          label=\"Your password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n                />\r\n    \r\n                <MyTextInput\r\n          label=\"Confirm your password\"\r\n          name=\"confirmPassword\"\r\n          type=\"password\"/>\r\n\r\n            <button className={ s.btn} type=\"submit\" disabled={!(formik.dirty && formik.isValid)}>Submit</button>\r\n      </Form>\r\n        ) }\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default Registration ;\r\n"],"sourceRoot":""}